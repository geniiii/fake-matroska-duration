trigger:
  branches:
    include:
      - "*"
  tags:
    include:
      - v*
  paths:
      exclude:
        - README.adoc
        - LICENSE
jobs:
  - job: Linux
    pool:
      vmImage: ubuntu-latest

    steps:
    - script: gcc -std=c99 -pedantic -Wextra -O3 -o patcher src/main.c src/patches.c src/checks.c
      displayName: 'Build'

    - bash: mv $SYSTEM_DEFAULTWORKINGDIRECTORY/patcher $BUILD_ARTIFACTSTAGINGDIRECTORY/patcher-linux-x64
      displayName: Move binary to artifact directory

    - task: PublishBuildArtifacts@1
      displayName: Upload binary to artifacts
      inputs:
        artifactName: patcher
        pathToPublish: $(Build.ArtifactStagingDirectory)

  - job: Windows
    pool:
      vmImage: windows-latest

    steps:
    - task: MSBuild@1
      inputs:
        solution: $(System.DefaultWorkingDirectory)/patcher.vcxproj
        platform: x64
        configuration: Release

    - bash: mv $SYSTEM_DEFAULTWORKINGDIRECTORY/x64/Release/patcher.exe $BUILD_ARTIFACTSTAGINGDIRECTORY/patcher-windows-x64.exe
      displayName: Move binary to artifact directory

    - task: PublishBuildArtifacts@1
      displayName: Upload binary to artifacts
      inputs:
        artifactName: patcher
        pathToPublish: $(Build.ArtifactStagingDirectory)
   
  - job: macOS
    pool:
      vmImage: macos-latest

    steps:
    - script: clang -std=c99 -pedantic -Wextra -O3 -o patcher src/main.c src/patches.c src/checks.c
      displayName: 'Build'

    - bash: mv $SYSTEM_DEFAULTWORKINGDIRECTORY/patcher $BUILD_ARTIFACTSTAGINGDIRECTORY/patcher-macOS
      displayName: Move binary to artifact directory

    - task: PublishBuildArtifacts@1
      displayName: Upload binary to artifacts
      inputs:
        artifactName: patcher
        pathToPublish: $(Build.ArtifactStagingDirectory)

  - job: Release
    displayName: Create GitHub Release
    pool:
      vmImage: ubuntu-latest

    dependsOn:
      - Windows
      - Linux
      - macOS

    steps:
    - task: DownloadBuildArtifacts@0
      inputs:
        downloadType: specific

    - bash: |
        export RELEASE_TAG=$(git describe)
        echo "##vso[task.setvariable variable=release_tag]$RELEASE_TAG"
      displayName: Set release tag
 
    - task: GitHubRelease@1
      condition: startswith(variables['Build.SourceBranch'], 'refs/tags/')
      displayName: Create GitHub release
      inputs:
        gitHubConnection: releases
        title: $(release_tag)
        tagPattern: ^v(\d+\.)+(\d+\.)+(\*|\d+)$
        assets: $(System.ArtifactsDirectory)/patcher/*
